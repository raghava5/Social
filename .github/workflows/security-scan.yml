name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  secret-scan:
    name: Detect hardcoded secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check if GitGuardian API key exists
        id: check-key
        run: |
          if [ -z "${{ secrets.GITGUARDIAN_API_KEY }}" ]; then
            echo "GitGuardian API key not configured. Skipping GitGuardian scan."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: GitGuardian scan
        if: steps.check-key.outputs.skip == 'false'
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      
      - name: Alternative security check
        if: steps.check-key.outputs.skip == 'true'
        run: |
          echo "üîç Running basic security patterns check..."
          # Check for common secret patterns
          if grep -r -E "(password|secret|key|token|api_key)\s*[:=]\s*['\"][^'\"]+['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . --exclude-dir=node_modules --exclude-dir=.git || true; then
            echo "‚ö†Ô∏è  Found potential hardcoded secrets. Please review and use environment variables."
          else
            echo "‚úÖ No obvious hardcoded secrets found."
          fi

  check-env-files:
    name: Check for committed env files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for .env files
        run: |
          echo "üîç Checking for accidentally committed environment files..."
          
          # Check for .env files
          if git ls-files | grep -E '\.env(\.[^.]+)?$' | grep -v '\.env\.example$'; then
            echo "::error::‚ùå Found .env files in repository! Remove them immediately."
            echo "::error::Files found:"
            git ls-files | grep -E '\.env(\.[^.]+)?$' | grep -v '\.env\.example$'
            exit 1
          fi
          
          # Check for other sensitive file patterns
          if git ls-files | grep -E '\.(key|pem|crt|cert|p12|pfx)$'; then
            echo "::error::‚ùå Found potential certificate/key files in repository!"
            echo "::error::Files found:"
            git ls-files | grep -E '\.(key|pem|crt|cert|p12|pfx)$'
            exit 1
          fi
          
          # Check for backup files that might contain secrets
          if git ls-files | grep -E '\.(backup|bak|old)$' | head -5; then
            echo "::warning::‚ö†Ô∏è  Found backup files. Please verify they don't contain secrets:"
            git ls-files | grep -E '\.(backup|bak|old)$' | head -5
          fi
          
          echo "‚úÖ No sensitive environment files found in repository." 