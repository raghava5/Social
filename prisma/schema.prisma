// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  bio             String?
  profileImageUrl String?
  coverImageUrl   String?
  dateOfBirth     DateTime?
  location        String?
  website         String?
  phoneNumber     String?
  isVerified      Boolean   @default(false)
  isPrivate       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?

  // Relations
  profile         Profile?
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  sentFriendships Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")
  sentMessages    Message[]
  conversations   ConversationParticipant[]
  createdGroups   Group[] @relation("CreatedGroups")
  groupMemberships GroupMember[]
  notifications   Notification[]
}

model Profile {
  id                String   @id @default(uuid())
  userId            String   @unique
  work              Json?
  education         Json?
  relationshipStatus String?
  interests         Json?
  about             String?
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            String   @id @default(uuid())
  userId        String
  content       String
  mediaUrls     Json?
  privacyLevel  String   @default("public")
  location      String?
  feeling       String?
  isEdited      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id              String   @id @default(uuid())
  postId          String
  userId          String
  parentCommentId String?
  content         String
  mediaUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  likes           Like[]
}

model Like {
  id            String   @id @default(uuid())
  userId        String
  likeableType  String
  likeableId    String
  reactionType  String   @default("like")
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("SentFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("ReceivedFriendships", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Message {
  id              String   @id @default(uuid())
  conversationId  String
  senderId        String
  content         String
  mediaUrls       Json?
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
  readAt          DateTime?

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(uuid())
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id              String   @id @default(uuid())
  conversationId  String
  userId          String
  joinedAt        DateTime @default(now())
  leftAt          DateTime?
  isAdmin         Boolean  @default(false)

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Group {
  id            String   @id @default(uuid())
  name          String
  description   String?
  coverImageUrl String?
  privacyLevel  String   @default("public")
  creatorId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creator       User     @relation("CreatedGroups", fields: [creatorId], references: [id], onDelete: Cascade)
  members       GroupMember[]
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        String
  entityType  String
  entityId    String
  actorId     String
  isRead      Boolean  @default(false)
  data        Json?
  createdAt   DateTime @default(now())
  readAt      DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actor       User     @relation(fields: [actorId], references: [id], onDelete: Cascade)
} 