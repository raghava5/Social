generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                    @id @default(uuid())
  username            String                    @unique
  email               String                    @unique
  passwordHash        String
  firstName           String
  lastName            String
  bio                 String?
  profileImageUrl     String?
  coverImageUrl       String?
  dateOfBirth         DateTime?
  location            String?
  website             String?
  phoneNumber         String?
  isVerified          Boolean                   @default(false)
  isPrivate           Boolean                   @default(false)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  lastLogin           DateTime?
  name                String?
  avatar              String?
  bookmarks           Bookmark[]
  comments            Comment[]
  conversations       ConversationParticipant[]
  receivedFriendships Friendship[]              @relation("ReceivedFriendships")
  sentFriendships     Friendship[]              @relation("SentFriendships")
  createdGroups       Group[]                   @relation("CreatedGroups")
  groupMemberships    GroupMember[]
  likes               Like[]
  sentMessages        Message[]
  actorNotifications  Notification[]            @relation("ActorNotifications")
  notifications       Notification[]            @relation("UserNotifications")
  authoredPosts       Post[]                    @relation("AuthoredPosts")
  posts               Post[]                    @relation("UserPosts")
  profile             Profile?

  @@index([id, firstName, lastName, profileImageUrl, avatar], map: "users_batch_lookup")
  @@index([id, firstName, lastName, profileImageUrl, avatar], map: "users_id_profile")
  @@index([id, firstName, lastName, profileImageUrl], map: "users_id_profile_optimized")
}

model Profile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  work               String?
  education          String?
  relationshipStatus String?
  interests          String?
  about              String?
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String      @id @default(cuid())
  userId      String
  content     String
  images      String?
  videos      String?
  feeling     String?
  location    String?
  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  shares      Int         @default(0)
  spoke       String?
  type        String      @default("user-post")
  tags        String?
  audios      String?
  documents   String?
  title       String?
  latitude    Float?
  longitude   Float?
  isAnonymous Boolean     @default(false)
  bookmarks   Bookmark[]
  comments    Comment[]
  likes       Like[]
  author      User        @relation("AuthoredPosts", fields: [authorId], references: [id])
  user        User        @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  transcript  Transcript?

  @@index([isAnonymous, createdAt(sort: Desc)])
  @@index([latitude, longitude])
  @@index([isDeleted, createdAt(sort: Desc)], map: "posts_active_by_date")
  @@index([authorId, isDeleted, createdAt(sort: Desc)], map: "posts_author_active")
  @@index([createdAt(sort: Desc)], map: "posts_chronological")
  @@index([isDeleted, spoke, type, createdAt(sort: Desc)], map: "posts_combined_filter")
  @@index([isDeleted, createdAt(sort: Desc), id, images, videos, feeling, spoke, authorId], map: "posts_covering_main")
  @@index([id, createdAt(sort: Desc)], map: "posts_id_cursor")
  @@index([isDeleted, createdAt(sort: Desc)], map: "posts_isdeleted_createdat_desc")
  @@index([isDeleted, spoke, createdAt(sort: Desc)], map: "posts_spoke_active_desc")
  @@index([isDeleted, spoke, createdAt(sort: Desc)], map: "posts_spoke_filter")
  @@index([isDeleted, type, createdAt(sort: Desc)], map: "posts_type_active_desc")
  @@index([isDeleted, type, createdAt(sort: Desc)], map: "posts_type_filter")
  @@index([userId, isDeleted, createdAt(sort: Desc)], map: "posts_user_active")
}

model Comment {
  id              String    @id @default(cuid())
  postId          String
  userId          String
  parentCommentId String?
  content         String
  mediaUrl        String?
  isEdited        Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isAnonymous     Boolean   @default(false)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           Like[]

  @@index([postId, isDeleted, createdAt(sort: Desc)], map: "comments_post_active")
  @@index([postId, isDeleted, createdAt, userId], map: "comments_post_aggregation")
  @@index([postId, isDeleted, userId, createdAt], map: "comments_postid_active_optimized")
}

model Like {
  id           String   @id @default(cuid())
  userId       String
  postId       String?
  commentId    String?
  reactionType String   @default("like")
  createdAt    DateTime @default(now())
  comment      Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([postId, userId, createdAt], map: "likes_post_aggregation")
  @@index([postId, userId], map: "likes_post_user")
  @@index([postId, userId, createdAt], map: "likes_postid_optimized")
  @@index([userId, postId], map: "likes_user_batch")
  @@index([userId, postId], map: "likes_user_post")
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("ReceivedFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("SentFriendships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  mediaUrls      String?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String                    @id @default(cuid())
  name         String?
  isGroup      Boolean                   @default(false)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  isAdmin        Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Group {
  id            String        @id @default(cuid())
  name          String
  description   String?
  coverImageUrl String?
  privacyLevel  String        @default("public")
  creatorId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creator       User          @relation("CreatedGroups", fields: [creatorId], references: [id], onDelete: Cascade)
  members       GroupMember[]
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  type       String
  entityType String
  entityId   String
  actorId    String
  isRead     Boolean   @default(false)
  data       String?
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  actor      User      @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  user       User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Transcript {
  id        String   @id @default(cuid())
  postId    String   @unique
  videoUrl  String
  language  String   @default("en")
  status    String   @default("processing")
  segments  Json?
  fullText  String?
  duration  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
