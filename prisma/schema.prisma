// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  bio             String?
  profileImageUrl String?
  coverImageUrl   String?
  dateOfBirth     DateTime?
  location        String?
  website         String?
  phoneNumber     String?
  isVerified      Boolean   @default(false)
  isPrivate       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?
  name            String?
  avatar          String?

  // Relations
  profile         Profile?
  posts           Post[]    @relation("UserPosts")
  authoredPosts   Post[]    @relation("AuthoredPosts")
  comments        Comment[]
  likes           Like[]
  sentFriendships Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")
  sentMessages    Message[]
  conversations   ConversationParticipant[]
  createdGroups   Group[] @relation("CreatedGroups")
  groupMemberships GroupMember[]
  notifications   Notification[] @relation("UserNotifications")
  actorNotifications Notification[] @relation("ActorNotifications")
  bookmarks       Bookmark[]
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  work              String?
  education         String?
  relationshipStatus String?
  interests         String?
  about             String?
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            String    @id @default(cuid())
  userId        String
  content       String
  images        String?
  videos        String?
  audios        String?
  documents     String?
  feeling       String?
  location      String?
  isEdited      Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  shares        Int       @default(0)
  spoke         String?
  type          String    @default("user-post")
  tags          String?

  user          User      @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  author        User      @relation("AuthoredPosts", fields: [authorId], references: [id])
  transcript    Transcript?

  // ðŸš€ PERFORMANCE INDEXES - Essential for fast post queries
  @@index([createdAt(sort: Desc)])
  @@index([isDeleted, createdAt(sort: Desc)])
  @@index([spoke, isDeleted, createdAt(sort: Desc)])
  @@index([type, isDeleted, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model Comment {
  id              String    @id @default(cuid())
  postId          String
  userId          String
  parentCommentId String?
  content         String
  mediaUrl        String?
  isEdited        Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  likes           Like[]

  // ðŸš€ PERFORMANCE INDEXES
  @@index([postId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model Like {
  id            String    @id @default(cuid())
  userId        String
  postId        String?
  commentId     String?
  reactionType  String    @default("like")
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment       Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
}

model Friendship {
  id        String    @id @default(cuid())
  userId    String
  friendId  String
  status    String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation("SentFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User      @relation("ReceivedFriendships", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Message {
  id              String    @id @default(cuid())
  conversationId  String
  senderId        String
  content         String
  mediaUrls       String?
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  readAt          DateTime?

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  name        String?
  isGroup     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  messages    Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id              String    @id @default(cuid())
  conversationId  String
  userId          String
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?
  isAdmin         Boolean   @default(false)

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Group {
  id            String    @id @default(cuid())
  name          String
  description   String?
  coverImageUrl String?
  privacyLevel  String    @default("public")
  creatorId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  creator       User      @relation("CreatedGroups", fields: [creatorId], references: [id], onDelete: Cascade)
  members       GroupMember[]
}

model GroupMember {
  id        String    @id @default(cuid())
  groupId   String
  userId    String
  role      String    @default("member")
  joinedAt  DateTime  @default(now())

  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String
  entityType  String
  entityId    String
  actorId     String
  isRead      Boolean   @default(false)
  data        String?
  createdAt   DateTime  @default(now())
  readAt      DateTime?

  user        User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor       User      @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Transcript {
  id        String   @id @default(cuid())
  postId    String   @unique
  videoUrl  String
  language  String   @default("en")
  status    String   @default("processing") // processing, completed, failed
  segments  Json?    // Array of {start: number, end: number, text: string}
  fullText  String?  // Complete transcript text
  duration  Float?   // Video duration in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
} 